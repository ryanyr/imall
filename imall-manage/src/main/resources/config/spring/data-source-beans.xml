<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	 					http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">


	<bean id="ResourceConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/server.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <!-- 驱动名称-->
	    <property name="driverClassName" value="${msdLibrary.db.driverClass}" />
	    <!-- JDBC连接串 -->
	    <property name="url" value="${msdLibrary.db.jdbcUrl}" />
	    <!-- 数据库用户名-->
	    <property name="username" value="${msdLibrary.db.username}" />
	     <!-- 控制密码是否加密
        <property name="connectionProperties" value="config.decrypt=true" /> -->
	   
	    <!-- 数据库用户密码 -->
	    <property name="password" value="${msdLibrary.db.password}"/>
	    <property name="filters" value="config,stat" />
	   
	     <!-- 连接池扩展
	    <property name="filters" value="stat" />-->
	    <!-- 连接池最大值-->
	    <property name="maxActive" value="180" />
	    <!-- 初始化大小 -->
	    <property name="initialSize" value="1" />
	    <!-- 获取连接最大等待时间 -->
	    <property name="maxWait" value="60000" />
	    <!-- 连接池最小空闲 -->
	    <property name="minIdle" value="1" />
	    <!-- 逐出连接的检测时间间隔 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <!-- 最小逐出时间  --> 
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <!-- 检测连接是否有效的SQL-->
	    <property name="validationQuery" value="SELECT 1" />
	    <!-- 借出连接时是否做测试-->
	    <property name="testWhileIdle" value="true" />
	    <!-- 借出连接时是否做测试-->
	    <property name="testOnBorrow" value="false" />
	    <!--归还连接时是否做测试-->
	    <property name="testOnReturn" value="false" />
 
	    <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="3600" />
	    <!--借出连接时是否做测试-->
	    <!-- <property name="poolPreparedStatements" value="true" />
	     Statement缓存大小
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->
     </bean>

	<!--jdbcTemplate 定义：基于数组下标的ORM映射 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- namedParameterJdbcTemplate 定义：基于bean属性名的ORM映射-->
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg type="org.springframework.jdbc.core.JdbcOperations">
			<ref bean="jdbcTemplate"/>
		</constructor-arg>
	</bean>

	<!--<bean id="paginationInterceptor" class="com.czwx.imall.manage.common.mybatisextend.PaginationInterceptor"/>-->
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations">
			<list>
				<value>classpath*:/config/mappers/*.xml</value>
				<value>classpath*:/config/mappers/system/*.xml</value>
			</list>
		</property>
		<property name="configLocation" value="classpath:config/spring/mybatis-config.xml"/>
	</bean>

	<!-- mapper扫描 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.czwx.imall"/>
		<property name="annotationClass" value="com.czwx.imall.core.common.mapper.RDBatisDao"/>
	</bean>

	<!-- 配置sqlSessionTemplate-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!--- 如果想要进行批量操作可加入这个属性 -->
		<!--         <constructor-arg index="1" value="BATCH" />  -->
	</bean>

	<!-- 配置事务 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
						  proxy-target-class="true" />
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.yqjr.service..*Impl.*(..))"
					 advice-ref="txAdvice" />
		<!-- <aop:advisor pointcut="execution(* com.yqjr.service.impl.wapimpl..*Impl.*(..))"
			advice-ref="txAdvice" /> -->
	</aop:config>
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="getVerify" propagation="REQUIRED" />
			<tx:method name="givePaytransno" propagation="REQUIRES_NEW" />
			<tx:method name="updatePaySeq" propagation="REQUIRES_NEW" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
</beans>